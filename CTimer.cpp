//
//	CTimer.cpp
//		Author:	DATE:
//===============================================
//	変更者 Changed By
//		Name:	DATE:
//
//-----------------------------------------------

//===============================================
//	インクルード	include
//===============================================
#include"common.h"
#include"CTimer.h"

//class

//===============================================
//	マクロ定義		define
//===============================================


//===============================================
//	グローバル変数	global
//===============================================


//===============================================
//	Timer
//===============================================

//-------------------------------------
//	静的メンバ変数初期化
//-------------------------------------
int FrameCount = 0;
int LimitTime = LIMIT_TIME * 60;
int RemainTime = (LimitTime - FrameCount) / 60;
bool IsActive = false;

//-------------------------------------
//	カウントスタート
//-------------------------------------
void Timer::Start()
{
	IsActive = true;
}

//-------------------------------------
//	カウントスタート
//-------------------------------------
void Timer::Stop()
{
	IsActive = false;
}

//-------------------------------------
//	フレームカウントリセット
//-------------------------------------
void Timer::Reset()
{
	FrameCount = 0;		// フレームカウントリセット
	RemainTime = (LimitTime - FrameCount) / 60;		// 残り時間初期化	
}

//-------------------------------------
//	更新
//-------------------------------------
void Timer::Update(NSCENE::AScene* pNextScene)
{
	// タイマー停止中なら何もせずに終了
	if (!IsActive)
		return;

	RemainTime = (LimitTime - FrameCount) / 60;		// 残り時間更新

	// 制限時間チェック
	if (RemainTime < 0)
	{
		// タイマー停止
		Stop();
		// シーン遷移
		NSCENE::LoadScene(pNextScene);
	}

	// フレームカウント進行
	FrameCount++;
}

//-------------------------------------
//	更新
//-------------------------------------
int Timer::GetTime()
{
	return RemainTime;
}
